{"version":3,"sources":["Context.js","Components/TimerLengthControl.js","Components/TimerControl.js","Components/Timer.js","App.js","index.js"],"names":["AppContext","React","createContext","AppProvider","children","useState","breakLength","setBreakLength","sessionLength","setSessionLength","breakTimer","setBreakTimer","sessionTimer","setSessionTimer","startStop","setStartStop","isTimerRunning","setIsTimerRunning","mouseFunction","setMouseFunction","increment","id","prev","decrement","useEffect","time","setTimeout","timer","clearTimeout","Provider","value","handleStartStop","reset","increaseOnMouseDown","setInterval","decreaseOnMouseDown","clearOnMouseDown","clearInterval","useGlobalContext","useContext","TimerLengthControl","titleId","title","incId","decId","lengthId","length","className","onClick","onMouseDown","e","button","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","focusable","TimerControl","audioRef","useRef","current","play","currentTime","pause","preload","ref","src","Timer","minutes","Math","floor","seconds","clockify","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAEMA,EAAaC,IAAMC,gBAEnBC,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,EAAsCC,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAoCJ,qBAApC,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAwCN,qBAAxC,mBAAOO,EAAP,KAAqBC,EAArB,KACA,EAAkCR,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACA,EAA4CV,oBAAS,GAArD,mBAAOW,EAAP,KAAuBC,EAAvB,KACA,EAA0CZ,mBAAS,MAAnD,mBAAOa,EAAP,KAAsBC,EAAtB,KAEMC,EAAY,SAACC,GACVP,IACU,oBAAPO,EACIf,EAAc,IACdC,GAAe,SAACe,GAAD,OAAUA,EAAO,KAEtB,sBAAPD,GACHb,EAAgB,IAChBC,GAAiB,SAACa,GAAD,OAAUA,EAAO,OAK5CC,EAAY,SAACF,GACVP,IACU,oBAAPO,EACIf,EAAc,GACdC,GAAe,SAACe,GAAD,OAAUA,EAAO,KAEtB,sBAAPD,GACHb,EAAgB,GAChBC,GAAiB,SAACa,GAAD,OAAUA,EAAO,OAoGlD,OApDAE,qBAAU,WACN,GAAIV,EAAW,CACX,IAAIW,EAAO,KAgBX,OAfIb,GAAgB,IAAMI,EACtBS,EAAOC,YAAW,WACdb,GAAgB,SAACc,GAAD,OAAWA,EAAQ,KACnChB,EAA4B,GAAdL,KACf,KACII,GAAc,GAAKM,EAC1BS,EAAOC,YAAW,WACdf,GAAc,SAACgB,GAAD,OAAWA,EAAQ,KACjCd,EAAgC,GAAhBL,KACjB,KACII,GAAgB,EACvBK,GAAkB,GACXP,GAAc,GACrBO,GAAkB,GAEf,WACHW,aAAaH,OAGtB,CAACf,EAAYE,EAAcE,EAAWE,IAEzCQ,qBAAU,WACFhB,EAAgB,IAChBC,EAAiB,IAEjBD,EAAgB,GAChBC,EAAiB,GAEjBH,EAAc,IACdC,EAAe,IAEfD,EAAc,GACdC,EAAe,GAEnBM,EAAgC,GAAhBL,GAChBG,EAA4B,GAAdL,KACf,CAACA,EAAaE,IAcb,cAACR,EAAW6B,SAAZ,CACIC,MAAO,CACHxB,cACAE,gBACAI,eACAF,aACAI,YACAE,iBACAT,iBACAE,mBACAW,YACAG,YACAQ,gBAlFY,WAEhBhB,GADAD,IAkFIkB,MA3EE,WACVjB,GAAa,GACbR,EAAe,GACfE,EAAiB,IACjBI,EAAgC,GAAhBL,GAChBG,EAA4B,GAAdL,GACdW,GAAkB,IAsEVgB,oBA7GgB,SAACZ,GACpBP,GACDK,EACIe,aAAY,WACRd,EAAUC,KACX,OAyGHc,oBApGgB,SAACd,GACpBP,GACDK,EACIe,aAAY,WACRX,EAAUF,KACX,OAgGHe,iBA3Fa,WACrBC,cAAcnB,GACdC,EAAiB,QAyEjB,SAmBKf,KAMAkC,EAAmB,WAC5B,OAAOC,qBAAWvC,I,OC9FPwC,EA/DY,SAAC,GAOrB,IANHC,EAME,EANFA,QACAC,EAKE,EALFA,MACAC,EAIE,EAJFA,MACAC,EAGE,EAHFA,MACAC,EAEE,EAFFA,SACAC,EACE,EADFA,OAEA,EAMIR,IALAf,EADJ,EACIA,UACAH,EAFJ,EAEIA,UACAa,EAHJ,EAGIA,oBACAE,EAJJ,EAIIA,oBACAC,EALJ,EAKIA,iBAEJ,OACI,sBAAKW,UAAU,oBAAf,UACI,oBAAIA,UAAU,eAAe1B,GAAIoB,EAAjC,SACKC,IAEL,sBAAKK,UAAU,uBAAf,UACI,yBACIA,UAAU,mBACV1B,GAAIuB,EACJI,QAAS,kBAAMzB,EAAUqB,IACzBK,YAAa,SAACC,GACO,IAAbA,EAAEC,QACFhB,EAAoBS,IAG5BQ,UAAWhB,EACXiB,aAAcjB,EACdkB,aAAc,SAACJ,GAAD,OAAOf,EAAoBS,IACzCW,WAAYnB,EAZhB,UAcI,sBAAMW,UAAU,eAAhB,8BACA,cAAC,IAAD,CAAmB,eAAa,EAAMS,WAAW,OAErD,mBAAGT,UAAU,YAAY1B,GAAIwB,EAA7B,SACKC,IAEL,yBACIC,UAAU,mBACV1B,GAAIsB,EACJK,QAAS,kBAAM5B,EAAUuB,IACzBM,YAAa,SAACC,GACO,IAAbA,EAAEC,QACFlB,EAAoBU,IAG5BS,UAAWhB,EACXiB,aAAcjB,EACdkB,aAAc,SAACJ,GAAD,OAAOjB,EAAoBU,IACzCY,WAAYnB,EAZhB,UAcI,sBAAMW,UAAU,eAAhB,8BACA,cAAC,IAAD,CAAiB,eAAa,EAAMS,WAAW,c,OCFpDC,EArDM,WACjB,MACInB,IADIP,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,MAAOpB,EAAhC,EAAgCA,aAAcF,EAA9C,EAA8CA,WAAYI,EAA1D,EAA0DA,UAGpD4C,EAAWC,iBAAO,MASxB,OAPAnC,qBAAU,WACe,IAAjBZ,GAAqC,IAAfF,IACtBgD,EAASE,QAAQC,OACjBH,EAASE,QAAQE,YAAc,KAEpC,CAAClD,EAAcF,IAGd,sBAAKW,GAAG,0BAAR,UACI,yBACIA,GAAG,aACH0B,UAAU,oBACVC,QAASjB,EAHb,UAKI,sBAAMgB,UAAU,eAAhB,wBACCjC,EACG,cAAC,IAAD,CAAe,eAAa,EAAM0C,WAAW,IAE7C,cAAC,IAAD,CAAc,eAAa,EAAMA,WAAW,OAGpD,yBACInC,GAAG,QACH0B,UAAU,oBACVC,QAAS,WACLU,EAASE,QAAQG,QACjBL,EAASE,QAAQE,YAAc,EAC/B9B,KANR,UASI,sBAAMe,UAAU,eAAhB,mBACA,cAAC,IAAD,CACIA,UAAU,iBACV,eAAa,EACbS,WAAW,OAGnB,uBACInC,GAAG,OACH2C,QAAQ,OACRC,IAAKP,EACLQ,IAAI,kHCrBLC,EA3BD,WACV,MACI7B,IADI5B,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,aAAcI,EAAlC,EAAkCA,eAAgBF,EAAlD,EAAkDA,UAYlD,OACI,0BAASO,GAAG,kBAAZ,UACI,sBAAKA,GAAG,0BAAR,UACI,oBAAIA,GAAG,cAAP,SACML,EAA6B,QAAZ,YAEvB,mBAAGK,GAAG,YAAN,SAfK,WACb,IAAMM,EAASX,EAAgCN,EAAfE,EAC5BwD,EAAUC,KAAKC,MAAM3C,EAAQ,IAC7B4C,EAAU5C,EAAkB,GAAVyC,EAGtB,OADAA,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GACxB,KAFjBG,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GAWdC,KACnB,qBAAKnD,GAAIP,EAAY,YAAc,QAEvC,cAAC,EAAD,QCUG2D,EA/BH,WACR,MAAuCnC,IAA/BhC,EAAR,EAAQA,YAAaE,EAArB,EAAqBA,cAErB,OACI,sBAAKa,GAAG,gBAAR,UACI,yBAASA,GAAG,aAAZ,SACI,gDAEJ,0BAASA,GAAG,wBAAZ,UACI,cAAC,EAAD,CACIoB,QAAQ,cACRC,MAAM,eACNC,MAAM,kBACNC,MAAM,kBACNC,SAAS,eACTC,OAAQxC,IAEZ,cAAC,EAAD,CACImC,QAAQ,gBACRC,MAAM,iBACNC,MAAM,oBACNC,MAAM,oBACNC,SAAS,iBACTC,OAAQtC,OAGhB,cAAC,EAAD,QCzBZkE,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,UACI,cAAC,EAAD,QAGRC,SAASC,eAAe,W","file":"static/js/main.64ab35fd.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const [breakLength, setBreakLength] = useState(5);\r\n    const [sessionLength, setSessionLength] = useState(25);\r\n    const [breakTimer, setBreakTimer] = useState();\r\n    const [sessionTimer, setSessionTimer] = useState();\r\n    const [startStop, setStartStop] = useState(false);\r\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n    const [mouseFunction, setMouseFunction] = useState(null);\r\n\r\n    const increment = (id) => {\r\n        if (!startStop) {\r\n            if (id === \"break-increment\") {\r\n                if (breakLength < 60) {\r\n                    setBreakLength((prev) => prev + 1);\r\n                }\r\n            } else if (id === \"session-increment\") {\r\n                if (sessionLength < 60) {\r\n                    setSessionLength((prev) => prev + 1);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const decrement = (id) => {\r\n        if (!startStop) {\r\n            if (id === \"break-decrement\") {\r\n                if (breakLength > 1) {\r\n                    setBreakLength((prev) => prev - 1);\r\n                }\r\n            } else if (id === \"session-decrement\") {\r\n                if (sessionLength > 1) {\r\n                    setSessionLength((prev) => prev - 1);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const increaseOnMouseDown = (id) => {\r\n        if (!startStop) {\r\n            setMouseFunction(\r\n                setInterval(() => {\r\n                    increment(id);\r\n                }, 100)\r\n            );\r\n        }\r\n    };\r\n\r\n    const decreaseOnMouseDown = (id) => {\r\n        if (!startStop) {\r\n            setMouseFunction(\r\n                setInterval(() => {\r\n                    decrement(id);\r\n                }, 100)\r\n            );\r\n        }\r\n    };\r\n\r\n    const clearOnMouseDown = () => {\r\n        clearInterval(mouseFunction);\r\n        setMouseFunction(null);\r\n    };\r\n\r\n    const handleStartStop = () => {\r\n        if (startStop) {\r\n            setStartStop(false);\r\n        } else {\r\n            setStartStop(true);\r\n        }\r\n    };\r\n\r\n    const reset = () => {\r\n        setStartStop(false);\r\n        setBreakLength(5);\r\n        setSessionLength(25);\r\n        setSessionTimer(sessionLength * 60);\r\n        setBreakTimer(breakLength * 60);\r\n        setIsTimerRunning(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (startStop) {\r\n            let time = null;\r\n            if (sessionTimer >= 0 && !isTimerRunning) {\r\n                time = setTimeout(() => {\r\n                    setSessionTimer((timer) => timer - 1);\r\n                    setBreakTimer(breakLength * 60);\r\n                }, 1000);\r\n            } else if (breakTimer >= 0 && isTimerRunning) {\r\n                time = setTimeout(() => {\r\n                    setBreakTimer((timer) => timer - 1);\r\n                    setSessionTimer(sessionLength * 60);\r\n                }, 1000);\r\n            } else if (sessionTimer <= 0) {\r\n                setIsTimerRunning(true);\r\n            } else if (breakTimer <= 0) {\r\n                setIsTimerRunning(false);\r\n            }\r\n            return () => {\r\n                clearTimeout(time);\r\n            };\r\n        }\r\n    }, [breakTimer, sessionTimer, startStop, isTimerRunning]);\r\n\r\n    useEffect(() => {\r\n        if (sessionLength > 60) {\r\n            setSessionLength(60);\r\n        }\r\n        if (sessionLength < 1) {\r\n            setSessionLength(1);\r\n        }\r\n        if (breakLength > 60) {\r\n            setBreakLength(60);\r\n        }\r\n        if (breakLength < 1) {\r\n            setBreakLength(1);\r\n        }\r\n        setSessionTimer(sessionLength * 60);\r\n        setBreakTimer(breakLength * 60);\r\n    }, [breakLength, sessionLength]);\r\n\r\n    // useEffect(() => {\r\n    //     if (mouseFunction !== null) {\r\n    //         setInterval(() => {\r\n    //             increment(\"session-increment\");\r\n    //         }, 100);\r\n    //     }\r\n    //     return () => {\r\n    //         clearInterval(mouseFunction);\r\n    //     };\r\n    // });\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                breakLength,\r\n                sessionLength,\r\n                sessionTimer,\r\n                breakTimer,\r\n                startStop,\r\n                isTimerRunning,\r\n                setBreakLength,\r\n                setSessionLength,\r\n                increment,\r\n                decrement,\r\n                handleStartStop,\r\n                reset,\r\n                increaseOnMouseDown,\r\n                decreaseOnMouseDown,\r\n                clearOnMouseDown,\r\n            }}\r\n        >\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n};\r\n","import React from \"react\";\r\nimport { FaArrowCircleDown, FaArrowCircleUp } from \"react-icons/fa\";\r\nimport { useGlobalContext } from \"../Context\";\r\n\r\nconst TimerLengthControl = ({\r\n    titleId,\r\n    title,\r\n    incId,\r\n    decId,\r\n    lengthId,\r\n    length,\r\n}) => {\r\n    const {\r\n        decrement,\r\n        increment,\r\n        increaseOnMouseDown,\r\n        decreaseOnMouseDown,\r\n        clearOnMouseDown,\r\n    } = useGlobalContext();\r\n    return (\r\n        <div className=\"length-controller\">\r\n            <h3 className=\"length-title\" id={titleId}>\r\n                {title}\r\n            </h3>\r\n            <div className=\"decinc-btn-container\">\r\n                <button\r\n                    className=\"decinc-btn-child\"\r\n                    id={decId}\r\n                    onClick={() => decrement(decId)}\r\n                    onMouseDown={(e) => {\r\n                        if (e.button === 0) {\r\n                            decreaseOnMouseDown(decId);\r\n                        }\r\n                    }}\r\n                    onMouseUp={clearOnMouseDown}\r\n                    onMouseLeave={clearOnMouseDown}\r\n                    onTouchStart={(e) => decreaseOnMouseDown(decId)}\r\n                    onTouchEnd={clearOnMouseDown}\r\n                >\r\n                    <span className=\"label-hidden\">Decrement Length</span>\r\n                    <FaArrowCircleDown aria-hidden={true} focusable={false} />\r\n                </button>\r\n                <p className=\"length-id\" id={lengthId}>\r\n                    {length}\r\n                </p>\r\n                <button\r\n                    className=\"decinc-btn-child\"\r\n                    id={incId}\r\n                    onClick={() => increment(incId)}\r\n                    onMouseDown={(e) => {\r\n                        if (e.button === 0) {\r\n                            increaseOnMouseDown(incId);\r\n                        }\r\n                    }}\r\n                    onMouseUp={clearOnMouseDown}\r\n                    onMouseLeave={clearOnMouseDown}\r\n                    onTouchStart={(e) => increaseOnMouseDown(incId)}\r\n                    onTouchEnd={clearOnMouseDown}\r\n                >\r\n                    <span className=\"label-hidden\">Increment Length</span>\r\n                    <FaArrowCircleUp aria-hidden={true} focusable={false} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TimerLengthControl;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../Context\";\r\nimport { FaPlayCircle, FaPauseCircle } from \"react-icons/fa\";\r\nimport { IoMdRefreshCircle } from \"react-icons/io\";\r\n\r\nconst TimerControl = () => {\r\n    const { handleStartStop, reset, sessionTimer, breakTimer, startStop } =\r\n        useGlobalContext();\r\n\r\n    const audioRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (sessionTimer === 0 || breakTimer === 0) {\r\n            audioRef.current.play();\r\n            audioRef.current.currentTime = 1;\r\n        }\r\n    }, [sessionTimer, breakTimer]);\r\n\r\n    return (\r\n        <div id=\"timer-control-container\">\r\n            <button\r\n                id=\"start_stop\"\r\n                className=\"timer-btn-control\"\r\n                onClick={handleStartStop}\r\n            >\r\n                <span className=\"label-hidden\">Start/Stop</span>\r\n                {startStop ? (\r\n                    <FaPauseCircle aria-hidden={true} focusable={false} />\r\n                ) : (\r\n                    <FaPlayCircle aria-hidden={true} focusable={false} />\r\n                )}\r\n            </button>\r\n            <button\r\n                id=\"reset\"\r\n                className=\"timer-btn-control\"\r\n                onClick={() => {\r\n                    audioRef.current.pause();\r\n                    audioRef.current.currentTime = 0;\r\n                    reset();\r\n                }}\r\n            >\r\n                <span className=\"label-hidden\">Reset</span>\r\n                <IoMdRefreshCircle\r\n                    className=\"reset-btn-icon\"\r\n                    aria-hidden={true}\r\n                    focusable={false}\r\n                />\r\n            </button>\r\n            <audio\r\n                id=\"beep\"\r\n                preload=\"auto\"\r\n                ref={audioRef}\r\n                src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TimerControl;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../Context\";\r\nimport TimerControl from \"./TimerControl\";\r\n\r\nconst Timer = () => {\r\n    const { breakTimer, sessionTimer, isTimerRunning, startStop } =\r\n        useGlobalContext();\r\n\r\n    const clockify = () => {\r\n        const timer = !isTimerRunning ? sessionTimer : breakTimer;\r\n        let minutes = Math.floor(timer / 60);\r\n        let seconds = timer - minutes * 60;\r\n        seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n        return minutes + \":\" + seconds;\r\n    };\r\n\r\n    return (\r\n        <section id=\"timer-container\">\r\n            <div id=\"timer-display-container\">\r\n                <h3 id=\"timer-label\">\r\n                    {!isTimerRunning ? \"Session\" : \"Break\"}\r\n                </h3>\r\n                <p id=\"time-left\">{clockify()}</p>\r\n                <div id={startStop ? \"timer-div\" : \"\"}></div>\r\n            </div>\r\n            <TimerControl />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"./Context\";\r\nimport TimerLengthControl from \"./Components/TimerLengthControl\";\r\nimport Timer from \"./Components/Timer\";\r\n\r\nconst App = () => {\r\n    const { breakLength, sessionLength } = useGlobalContext();\r\n\r\n    return (\r\n        <div id=\"app-container\">\r\n            <section id=\"app-header\">\r\n                <h1>25 + 5 Clock</h1>\r\n            </section>\r\n            <section id=\"timer-length-controls\">\r\n                <TimerLengthControl\r\n                    titleId=\"break-label\"\r\n                    title=\"Break Length\"\r\n                    incId=\"break-increment\"\r\n                    decId=\"break-decrement\"\r\n                    lengthId=\"break-length\"\r\n                    length={breakLength}\r\n                />\r\n                <TimerLengthControl\r\n                    titleId=\"session-label\"\r\n                    title=\"Session Length\"\r\n                    incId=\"session-increment\"\r\n                    decId=\"session-decrement\"\r\n                    lengthId=\"session-length\"\r\n                    length={sessionLength}\r\n                />\r\n            </section>\r\n            <Timer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { AppProvider } from \"./Context\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppProvider>\n            <App />\n        </AppProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}